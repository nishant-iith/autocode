name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # Test and Lint
  test:
    name: Test and Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          client/package-lock.json
          server/package-lock.json

    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci

    - name: Run ESLint
      run: |
        cd client && npm run lint
        cd ../server && npm run lint || true # Server may not have lint script

    - name: Run tests
      run: |
        cd client && npm test -- --watchAll=false --passWithNoTests

    - name: Build client
      run: |
        cd client && npm run build

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./client/coverage/lcov.info
        flags: client
        name: client-coverage
      if: always()

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Run security audit
      run: |
        npm audit --audit-level=moderate
        cd client && npm audit --audit-level=moderate
        cd ../server && npm audit --audit-level=moderate

  # Build and Deploy to Staging
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          client/package-lock.json
          server/package-lock.json

    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci

    - name: Build application
      run: |
        cd client && npm run build

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./client
        scope: ${{ secrets.VERCEL_ORG_ID }}

    - name: Comment deployment status
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const { owner, repo } = context.repo;
          const sha = context.sha;

          // Find the latest deployment comment or create a new one
          github.rest.issues.createComment({
            owner,
            repo,
            issue_number: context.issue.number || 1,
            body: `ðŸš€ **Deployment Status**\n\nâœ… Build completed successfully\nðŸ“¦ Application deployed to Vercel\nðŸ”— [View deployment](https://vercel.com) \n\nðŸ“Š **Build Details:**\n- Node.js: ${{ env.NODE_VERSION }}\n- Commit: ${sha.substring(0, 7)}\n- Branch: ${context.ref.replace('refs/heads/', '')}\n- Timestamp: ${new Date().toISOString()}`
          });

  # Performance Monitoring
  performance:
    name: Performance Audit
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build application
      run: |
        cd client && npm ci && npm run build

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './client/lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Docker Build (Optional for server deployment)
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./server
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/autocode-server:latest
          ${{ secrets.DOCKER_USERNAME }}/autocode-server:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ secrets.DOCKER_USERNAME }}/autocode-server:${{ github.sha }}
        format: spdx-json
        output-file: sbom.spdx.json